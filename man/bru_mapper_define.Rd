% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mappers.R
\name{bru_mapper_define}
\alias{bru_mapper_define}
\title{Mapper object constructor}
\usage{
bru_mapper_define(mapper, new_class = NULL, methods = NULL, ...)
}
\arguments{
\item{mapper}{A mapper S3 object, normally inheriting from \code{bru_mapper}.
For the default \code{bru_mapper} method, a list that will be converted to a
\code{bru_mapper} object by adding class information and (optional) methods.}

\item{new_class}{If non-\code{NULL}, this is added at the front of the class definition}

\item{methods}{Optional \code{list} of named method definitions; See Details.}
}
\description{
The core mapper class constructor method
}
\details{
\itemize{
\item \code{bru_mapper_define} adds the \code{new_class} and "bru_mapper" class
names to the inheritance list for the input \code{mapper} object, unless the object
already inherits from these.
If provided, mapper method functions are added to an environment
\code{.envir} in the object.  The generic methods \code{ibm_n}, \code{ibm_n_inla},
\code{ibm_values}, \code{ibm_values_inla},
\code{ibm_amatrix}, \code{ibm_amatrix_inla},
\code{ibm_valid_input}, and \code{ibm_valid_input_inla} look for these
functions first,
and otherwise call \code{UseMethod()}.  This is an alternative to using \code{.S3method()}
to register the methods, e.g.
\code{.S3method("ibm_amatrix", "my_mapper_class", ibm_amatrix.my_mapper_class)}.
}
}
\seealso{
\code{\link[=bru_mapper]{bru_mapper()}}
}
