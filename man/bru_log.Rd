% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/environment.R
\name{bru_log}
\alias{bru_log}
\alias{bru_log_reset}
\alias{bru_logify}
\alias{bru_logify.default}
\alias{bru_logify.character}
\alias{bru_logify.bru_log}
\alias{bru_log_bookmark}
\alias{bru_log_bookmarks}
\alias{bru_log_offset}
\alias{bru_log_get}
\alias{bru_log_get.default}
\alias{bru_log_get.iinla}
\alias{bru_log_get.bru}
\alias{print.bru_log}
\alias{[.bru_log}
\alias{c.bru_log}
\alias{bru_log_message}
\title{inlabru log message methods}
\usage{
bru_log_reset(bookmark = NULL, offset = NULL)

bru_logify(x = NULL, ...)

\method{bru_logify}{default}(x = NULL, ...)

\method{bru_logify}{character}(x, offset = 0L, ...)

\method{bru_logify}{bru_log}(x, offset = 0L, ...)

bru_log_bookmark(bookmark = "", offset = NULL)

bru_log_bookmarks()

bru_log_offset(bookmark = NULL, offset = NULL, log_length = NULL)

bru_log_get(..., offset = 0L)

\method{bru_log_get}{default}(..., bookmark = NULL, offset = 0L)

\method{bru_log_get}{iinla}(x, ..., offset = 0L)

\method{bru_log_get}{bru}(x, ..., offset = 0L)

\method{print}{bru_log}(x, ...)

\method{[}{bru_log}(x, i)

\method{c}{bru_log}(...)

bru_log_message(
  ...,
  domain = NULL,
  appendLF = TRUE,
  verbosity = 1,
  allow_verbose = TRUE,
  verbose = NULL,
  verbose_store = NULL
)
}
\arguments{
\item{bookmark}{character; The label for a bookmark with a stored offset.}

\item{offset}{integer; a position offset in the log, with \code{0L} pointing at
the start of the log. If negative, denotes the point \code{abs(offset)} elements
from tail of the log.}

\item{x}{For \code{bru_log_get()}, a \code{bru} or \code{iinla} object from \code{\link[=bru]{bru()}}.}

\item{...}{For \code{bru_log_message()}, zero or more objects passed on to
\code{\link[base:message]{base::.makeMessage()}}}

\item{log_length}{integer; the length of the log being operated on.
If \code{NULL} (default) the global inlabru log length is used.}

\item{i}{indices specifying elements to extract}

\item{domain}{Domain for translations, passed on to \code{\link[base:message]{base::.makeMessage()}}}

\item{appendLF}{logical; whether to add a newline to the message. Only
used for verbose output.}

\item{verbosity}{numeric value describing the verbosity level of the message}

\item{allow_verbose}{Whether to allow verbose output. Must be set to FALSE
until the options object has been initialised.}

\item{verbose}{logical, numeric, or \code{NULL}; local override for verbose
output. If \code{NULL}, the global option \code{bru_verbose} or default value is used.
If \code{FALSE}, no messages are printed. If \code{TRUE}, messages with \code{verbosity}
\eqn{\le 1}{<=1}
are printed. If numeric, messages with \code{verbosity} \eqn{\le}{<=} \code{verbose} are
printed.}

\item{verbose_store}{Same as \code{verbose}, but controlling what messages are
stored in the global log object. Can be controlled via the \code{bru_verbose_store}
with \code{\link[=bru_options_set]{bru_options_set()}}.}
}
\value{
\code{bru_log_bookmark} Return the offset of the added bookmark, invisibly.

\code{bru_log_get} A character vector of log messages, suitable for
\code{cat(..., sep = "\\n")}. For ordinary printing, the \code{print.bru_log} method
handles this by itself. An additional class identifier \code{bru_log} is added,
to allow a dedicated \code{print} method to be found.

\code{bru_log_message} returns \code{invisible()}
}
\description{
Log message methods
}
\section{Methods (by generic)}{
\itemize{
\item \code{bru_logify(bru_log)}: Subset from a \code{bru_log} object.

\item \code{print(bru_log)}: Print a \code{bru_log} object with \code{cat(x, sep = "\\n")}

\item \code{[}: Extract elements of a \code{bru_log} object

\item \code{c(bru_log)}: Concatenate several \code{bru_log} or \code{character} objects
into a \code{bru_log} object.

}}
\section{Functions}{
\itemize{
\item \code{bru_log_reset()}: Clears the \code{inlabru} log contents up to
a given \code{offset} or \code{bookmark}. Default: clear the entire log

\item \code{bru_logify()}: Create or subset from a \code{bru_log} object.

\item \code{bru_logify(default)}: Create an empty \code{bru_log} object.

\item \code{bru_logify(character)}: Convert a character vector into a \code{bru_log} object,
and optionally extract a subset.

\item \code{bru_log_bookmark()}: Set a log bookmark. If \code{offset} is \code{NULL} (the default),
the bookmark will point to the current end of the log.

\item \code{bru_log_bookmarks()}: Return a integer vector with named elements being
bookmarks into the global \code{inlabru} log with associated log
position offsets.

\item \code{bru_log_offset()}: Utility function for computing log position offsets.

\item \code{bru_log_get()}: Extract stored log messages

\item \code{bru_log_message()}: Adds a log message.

}}
\examples{
\dontrun{
if (interactive()) {
  bru_log_reset()
}
}
if (interactive()) {
  code_runner <- function() {
    local_bru_options_set(
      # Show messages up to and including level 2 (default 0)
      bru_verbose = 2,
      # Store messages to an including level 3 (default Inf, storing all)
      bru_verbose_store = 3
    )

    bru_log_bookmark("bookmark 1")
    bru_log_message("Test message 1", verbosity = 1)
    bru_log_message("Test message 2", verbosity = 2)
    bru_log_bookmark("bookmark 2")
    bru_log_message("Test message 3", verbosity = 3)
    bru_log_message("Test message 4", verbosity = 4)

    invisible()
  }
  message("Run code")
  code_runner()
  message("Check log from bookmark 1")
  print(bru_log_get(bookmark = "bookmark 1"))
  message("Check log from bookmark 2")
  print(bru_log_get(bookmark = "bookmark 2"))
}
}
