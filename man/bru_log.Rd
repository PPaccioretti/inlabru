% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/environment.R
\name{bru_log}
\alias{bru_log}
\alias{bru_log_reset}
\alias{bru_log_get}
\alias{bru_log_get.default}
\alias{bru_log_get.iinla}
\alias{bru_log_get.bru}
\alias{print.bru_log}
\alias{bru_log_message}
\title{inlabru log message methods}
\usage{
bru_log_reset()

bru_log_get(..., pretty = FALSE)

\method{bru_log_get}{default}(..., pretty = FALSE)

\method{bru_log_get}{iinla}(x, ..., pretty = FALSE)

\method{bru_log_get}{bru}(x, ..., pretty = FALSE)

\method{print}{bru_log}(x, ...)

bru_log_message(
  ...,
  domain = NULL,
  appendLF = TRUE,
  verbosity = 1,
  allow_verbose = TRUE,
  verbose = NULL,
  verbose_store = NULL
)
}
\arguments{
\item{...}{Zero or more objects passed on to \code{\link[base:message]{base::.makeMessage()}}}

\item{pretty}{logical; If \code{TRUE}, return a single string with the log
messages separated and terminated by line feeds, suitable for \code{cat(...)}.
If \code{FALSE}, return the raw log as a vector of strings, suitable for
\code{cat(..., sep = "\\n")}. For ordinary printing, the \code{print.bru_log} method
handles this by itself. Default: \code{FALSE}}

\item{x}{For \code{bru_log_get}, a \code{bru} or \code{iinla} object from \code{\link[=bru]{bru()}}.}

\item{domain}{Domain for translations, passed on to \code{\link[base:message]{base::.makeMessage()}}}

\item{appendLF}{logical; whether to add a newline to the message. Only
used for verbose output.}

\item{verbosity}{numeric value describing the verbosity level of the message}

\item{allow_verbose}{Whether to allow verbose output. Must be set to FALSE
until the options object has been initialised.}

\item{verbose}{logical, numeric, or \code{NULL}; local override for verbose
output. If \code{NULL}, the global option \code{bru_verbose} or default value is used.
If \code{FALSE}, no messages are printed. If \code{TRUE}, messages with \code{verbosity}
\eqn{\le 1}{<=1}
are printed. If numeric, messages with \code{verbosity} \eqn{\le}{<=} \code{verbose} are
printed.}

\item{verbose_store}{Same as \code{verbose}, but controlling what messages are
stored in the global log object. Can be controlled via the \code{bru_verbose_store}
with \code{\link[=bru_options_set]{bru_options_set()}}.}
}
\value{
\code{bru_log_get} A character vector of log messages. If \code{pretty} is \code{TRUE},
the messages are collapsed into a single string with \verb{\\n} separating the messages.
An additional class identifier \code{bru_log} is added, to allow a dedicated \code{print}
method.

\code{bru_log_message} returns \code{invisible()}
}
\description{
Log message methods
}
\section{Functions}{
\itemize{
\item \code{bru_log_reset()}: clears the \code{inlabru} log contents.

\item \code{bru_log_get()}: Extract stored log messages

\item \code{bru_log_message()}: adds a log message.

}}
\examples{
\dontrun{
if (interactive()) {
  bru_log_reset()
}
}
if (interactive()) {
  code_runner <- function() {
    ov <- bru_options_get("bru_verbose")
    ovs <- bru_options_get("bru_verbose_store")
    on.exit(bru_options_set(bru_verbose = ov))
    on.exit(bru_options_set(bru_verbose_store = ovs), add = TRUE)
    bru_options_set(bru_verbose = 3)
    bru_options_set(bru_verbose_store = 2)
    bru_log_message("Test message 1", verbosity = 1)
    bru_log_message("Test message 2", verbosity = 2)
    bru_log_message("Test message 3", verbosity = 3)
    bru_log_message("Test message 4", verbosity = 4)
    invisible()
  }
  message("Run code")
  code_runner()
  message("Check log")
  print(bru_log_get())
}
}
